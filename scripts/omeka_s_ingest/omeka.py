import os
from pathlib import Path
from dotenv import load_dotenv
import json
env_path = Path('.')/'.env'
load_dotenv(dotenv_path=env_path)
from omeka_s_tools.api import OmekaAPIClient
import math
omeka = os.getenv('OMEKA_SERVER')
omeka_auth = OmekaAPIClient(
    api_url = os.getenv('OMEKA_SERVER'),
    key_identity=os.getenv('KEY_IDENTITY'),                        
    key_credential=os.getenv('KEY_CREDENTIAL')                        
)

def reset():
    omeka = os.getenv('OMEKA_SERVER')
    omeka_auth = OmekaAPIClient(
        api_url = os.getenv('OMEKA_SERVER'),
        key_identity=os.getenv('KEY_IDENTITY'),                        
        key_credential=os.getenv('KEY_CREDENTIAL')                        
    )

def item_sets():
    pages = math.ceil(omeka.get_resources("item_sets")["total_results"] / 5)
    item_sets = []
    for i in range(pages):
        item_sets += omeka.get_resources("item_sets", page=i)["results"]
    return item_sets

def add_media_to_item(item_id, media_file, payload={}, template_id=None, class_id=None):
    # copied from the module to modify with different ingester
    '''
    Upload a media file and associate it with an existing item.

    Parameters:
    * `item_id` - the Omeka id of the item this media file should be added to
    * `media_path` - a path to an image/media file (string or pathlib Path)
    * `payload` (optional) - metadata to attach to media object, either
        a dict generated by `prepare_item_payload()` or `prepare_item_payload_using_template()`,
        or a string which is used as the value for `dcterms:title`.
    * `template_id` - internal Omeka identifier of a resource template you want to attach to this item
    * `class_id` - internal Omeka identifier of a resource class you want to attach to this item

    Returns:
    * a dict providing a JSON-LD representation of the new media object
    '''
    files = {}
    # For backwards compatibility
    if isinstance(media_file, dict):
        path = media_file['path']
        payload = media_file['title']
    # Make sure path is a Path object
    path = Path(media_file)
    if isinstance(payload, str):
        payload = omeka.omeka.prepare_item_payload({'dcterms:title': [payload]})
    if template_id:
        payload['o:resource_template'] = omeka.omeka.format_resource_id(template_id, 'resource_templates')
        if not class_id:
            template = omeka.omeka.get_resource_by_id(template_id, 'resource_templates')
            class_id = template['o:resource_class']['o:id']
    if class_id:
        payload['o:resource_class'] = omeka.omeka.format_resource_id(class_id, 'resource_classes')
    #add option to change ingester
    ingester = payload["o:ingester"] if payload["o:ingester"] else "upload"
    file_data = {
        'o:ingester': ingester,
        'file_index': '0',
        'o:source': path.name,
        'o:item': {'o:id': item_id},
    }
    payload.update(file_data)
    files[f'file[0]'] = path.read_bytes()
    files['data'] = (None, json.dumps(payload), 'application/json')
    response = omeka_auth.s.post(f'{omeka.api_url}/media', files=files, params=omeka_auth.params)
    data = omeka_auth.process_response(response)
    return data